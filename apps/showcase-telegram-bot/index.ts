import { setPortAdapter } from "@maxdev1/sotajs";
import { jtbdQualifierBotDefinition } from "./bot";
import { composeChatApp } from "@dlg-ngind/chat/";
import { composeBotPersonaApp } from "@dlg-ngind/bot-persona/";
import {
	interactionProcessedOutPort,
	incomingMessageReceivedOutPort,
	startChatServiceUseCase,
} from "@dlg-ngind/chat/src/application";
import { processUserInputUseCase } from "@dlg-ngind/bot-persona/src/runtime/application";
import {
	botPersonaDefinedOutPort,
	defineBotPersonaUseCase,
} from "@dlg-ngind/bot-persona/src/desing/application";
import { viewRenderOutPort } from "@dlg-ngind/bot-persona/src/runtime/application/ports";
import {
	telegramViewPresentationPort,
	telegramViewPresentationErrorPort,
} from "@dlg-ngind/bot-persona/src/ui/application/ports/presentation.ports.ts";
import { telegramViewPresentationAdapter } from "@dlg-ngind/bot-persona/src/ui/presentation/telegram/telegram.presenter.adapter.ts";

async function main() {
	console.log("üöÄ Starting Showcase Telegram Bot...");

	// 1. –°–æ–±–∏—Ä–∞–µ–º –æ–±–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	composeChatApp({ channel: "telegram" });
	composeBotPersonaApp();

	// --- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ—Ä—Ç—ã –≤—ã–≤–æ–¥–∞ (–∫–∞–∫ bot-persona –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è) ---
	// TODO: do not use mass setPortAdapters - doest not works

	setPortAdapter(telegramViewPresentationPort, telegramViewPresentationAdapter);
	setPortAdapter(telegramViewPresentationErrorPort, async (error) => {
		console.error("[Telegram Presenter] Error:", error.message);
	});

	// --- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ—Ä—Ç—ã –≤–≤–æ–¥–∞ (–∫–∞–∫ bot-persona –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è) ---

	// –ö–∞–Ω–∞–ª 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ (–∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏–∏)
	setPortAdapter(interactionProcessedOutPort, async (interaction) => {
		console.log(
			`[Orchestrator]: Got interaction from @chat, routing to @bot-persona...`,
		);
		await processUserInputUseCase(interaction);
	});

	// –ö–∞–Ω–∞–ª 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	setPortAdapter(incomingMessageReceivedOutPort, async (message) => {
		console.log(
			`[Orchestrator]: Got text message from @chat, routing to @bot-persona...`,
		);
		// –ú—ã –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DTO —Å–æ–æ–±—â–µ–Ω–∏—è –≤ DTO, –ø–æ–Ω—è—Ç–Ω—ã–π –¥–ª—è processUserInputUseCase
		await processUserInputUseCase({
			chatId: message.chatId,
			event: "text", // <--- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ "text"
			payload: { text: message.text },
		});
	});

	// 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
	let botPersonaId: string = "";
	setPortAdapter(botPersonaDefinedOutPort, async (dto) => {
		console.log(
			`[Orchestrator]: Bot Persona "${dto.name}" defined with ID: ${dto.personaId}`,
		);
		botPersonaId = dto.personaId;
	});

	await defineBotPersonaUseCase(jtbdQualifierBotDefinition);

	if (!botPersonaId) {
		console.error(
			"[Orchestrator]: Could not define Bot Persona. Shutting down.",
		);
		return;
	}

	// --- –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ---
	const demoChatIdEnv = process.env.DEMO_CHAT_ID;
	if (demoChatIdEnv) {
		const demoChatId = `telegram:${demoChatIdEnv}`;
		console.log("[Debug] Starting demo conversation for chatId:", demoChatId);
		const { startConversationUseCase } = await import(
			"@dlg-ngind/bot-persona/src/runtime/application"
		);
		await startConversationUseCase({
			botPersonaId,
			chatId: demoChatId,
		});
	} else {
		console.warn(
			"[Orchestrator]: DEMO_CHAT_ID env variable is not set. Cannot start demo conversation.",
		);
	}

	// 4. –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram
	await startChatServiceUseCase({
		channel: "telegram",
		config: { token: process.env.TELEGRAM_BOT_TOKEN },
	});

	console.log(
		`‚úÖ Showcase Telegram Bot is running. Send a message to your bot or press a button.`,
	);
}

main().catch(console.error);

import { RenderedView, MessageComponentDTO, ButtonComponentDTO, CardComponentDTO, ProductCardComponentDTO, BotProductCardComponentDTO } from '../../application/index.ts';
import { TelegramMessage, TelegramReplyMarkup, TelegramInlineKeyboardButton } from './telegram.types.ts';

/**
 * –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –≤ Telegram
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç RenderedView –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–Ω—è—Ç–Ω—ã–π Telegram Bot API
 */
export const telegramViewPresentationAdapter = async (renderedView: RenderedView): Promise<void> => {
  try {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è RenderedView –≤ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    const messageText = generateMessageText(renderedView);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–Ω–æ–ø–æ–∫
    const replyMarkup = generateReplyMarkup(renderedView);
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
    const telegramMessage: TelegramMessage = {
      chat_id: 123456789, // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      text: messageText,
      parse_mode: 'HTML',
      reply_markup: replyMarkup
    };
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ Telegram Bot API
    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', JSON.stringify(telegramMessage, null, 2));
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    await new Promise(resolve => setTimeout(resolve, 100));
  } catch (error: any) {
    throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –≤ Telegram: ${error.message}`);
  }
};

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
 */
const generateMessageText = (renderedView: RenderedView): string => {
  let messageText = `<b>${renderedView.name}</b>\n\n`;
  
  for (const component of renderedView.components) {
    switch (component.type) {
      case 'message':
        const messageComponent = component as MessageComponentDTO;
        messageText += formatMessageComponent(messageComponent);
        break;
        
      case 'card':
        const cardComponent = component as CardComponentDTO;
        messageText += formatCardComponent(cardComponent);
        break;
        
      case 'product-card':
        const productCardComponent = component as ProductCardComponentDTO;
        messageText += formatProductCardComponent(productCardComponent);
        break;
        
      case 'bot-product-card':
        const botProductCardComponent = component as BotProductCardComponentDTO;
        messageText += formatBotProductCardComponent(botProductCardComponent);
        break;
        
      default:
        messageText += `<i>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç–∏–ø–∞ "${component.type}"</i>\n\n`;
    }
  }
  
  return messageText;
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 */
const formatMessageComponent = (component: MessageComponentDTO): string => {
  let text = component.props.text;
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞
  switch (component.props.variant) {
    case 'info':
      text = `<i>${text}</i>`;
      break;
    case 'success':
      text = `<b>‚úÖ ${text}</b>`;
      break;
    case 'warning':
      text = `<b>‚ö†Ô∏è ${text}</b>`;
      break;
    case 'error':
      text = `<b>‚ùå ${text}</b>`;
      break;
  }
  
  return `${text}\n\n`;
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
 */
const formatCardComponent = (component: CardComponentDTO): string => {
  let text = `<b>${component.props.title}</b>\n`;
  
  if (component.props.description) {
    text += `${component.props.description}\n`;
  }
  
  if (component.props.imageUrl) {
    text += `<a href="${component.props.imageUrl}">üñº –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</a>\n`;
  }
  
  return `${text}\n`;
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
 */
const formatProductCardComponent = (component: ProductCardComponentDTO): string => {
  let text = `<b>${component.props.title}</b>\n`;
  
  if (component.props.description) {
    text += `${component.props.description}\n`;
  }
  
  if (component.props.price !== undefined) {
    const currency = component.props.currency || 'RUB';
    text += `<b>–¶–µ–Ω–∞: ${component.props.price} ${currency}</b>\n`;
  }
  
  if (component.props.imageUrl) {
    text += `<a href="${component.props.imageUrl}">üñº –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–∞</a>\n`;
  }
  
  return `${text}\n`;
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –±–æ—Ç–∞
 */
const formatBotProductCardComponent = (component: BotProductCardComponentDTO): string => {
  let text = `ü§ñ <b>${component.props.modelName}</b>\n`;
  
  if (component.props.features && component.props.features.length > 0) {
    text += `\n<b>–§—É–Ω–∫—Ü–∏–∏:</b>\n`;
    for (const feature of component.props.features) {
      text += `‚Ä¢ ${feature}\n`;
    }
  }
  
  if (component.props.price !== undefined) {
    const currency = component.props.currency || 'RUB';
    text += `\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å: ${component.props.price} ${currency}</b>\n`;
  }
  
  if (component.props.integrations && component.props.integrations.length > 0) {
    text += `\n<b>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:</b>\n`;
    for (const integration of component.props.integrations) {
      text += `‚Ä¢ ${integration}\n`;
    }
  }
  
  return `${text}\n`;
};

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–Ω–æ–ø–æ–∫ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
 */
const generateReplyMarkup = (renderedView: RenderedView): TelegramReplyMarkup | undefined => {
  const buttons: TelegramInlineKeyboardButton[] = [];
  
  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  for (const component of renderedView.components) {
    if (component.type === 'button') {
      const buttonComponent = component as ButtonComponentDTO;
      buttons.push({
        text: buttonComponent.props.text,
        callback_data: buttonComponent.props.action
      });
    }
    
    // –î–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    if (component.type === 'card' && component.props.actions) {
      for (const action of component.props.actions) {
        buttons.push({
          text: action.props.text,
          callback_data: action.props.action
        });
      }
    }
    
    // –î–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π "–ø–æ–¥—Ä–æ–±–Ω–µ–µ"
    if (component.type === 'product-card' && component.props.action) {
      buttons.push({
        text: component.props.actionText || '–ü–æ–¥—Ä–æ–±–Ω–µ–µ',
        callback_data: component.props.action
      });
    }
    
    // –î–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –±–æ—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π "–ø–æ–¥—Ä–æ–±–Ω–µ–µ"
    if (component.type === 'bot-product-card' && component.props.action) {
      buttons.push({
        text: component.props.actionText || '–ü–æ–¥—Ä–æ–±–Ω–µ–µ',
        callback_data: component.props.action
      });
    }
  }
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏, —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
  if (buttons.length > 0) {
    // –û—Ä–≥–∞–Ω–∏–∑—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
    const keyboard: TelegramInlineKeyboardButton[][] = [];
    for (let i = 0; i < buttons.length; i += 2) {
      keyboard.push(buttons.slice(i, i + 2));
    }
    
    return {
      inline_keyboard: keyboard
    };
  }
  
  return undefined;
};
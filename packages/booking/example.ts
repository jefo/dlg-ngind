import { composeBookingContext } from \"./src/composition\";\nimport { scheduleAppointmentUseCase } from \"./src/application/schedule-appointment.use-case\";\nimport { getAvailableTimeSlotsUseCase } from \"./src/application/get-available-time-slots.use-case\";\nimport { TimeSlot } from \"./src/domain\";\nimport { timeSlots } from \"./src/infrastructure/in-memory.adapters\";\n\n/**\n * Example script demonstrating how to use the Booking context\n */\nasync function runBookingExample() {\n  console.log(\"=== Booking Context Example ===\\n\");\n  \n  // 1. Initialize the context\n  composeBookingContext();\n  console.log(\"✓ Booking context initialized\");\n  \n  // 2. Create some sample time slots\n  const now = new Date();\n  const timeSlot1 = TimeSlot.create({\n    id: \"1\",\n    start: new Date(now.getTime() + 24 * 60 * 60 * 1000), // Tomorrow\n    end: new Date(now.getTime() + 25 * 60 * 60 * 1000),   // 1 hour duration\n    available: true,\n  });\n  \n  const timeSlot2 = TimeSlot.create({\n    id: \"2\",\n    start: new Date(now.getTime() + 48 * 60 * 60 * 1000), // Day after tomorrow\n    end: new Date(now.getTime() + 49 * 60 * 60 * 1000),   // 1 hour duration\n    available: true,\n  });\n  \n  // Store the time slots\n  timeSlots.set(timeSlot1.state.id, timeSlot1);\n  timeSlots.set(timeSlot2.state.id, timeSlot2);\n  console.log(\"✓ Sample time slots created\");\n  \n  // 3. Get available time slots\n  const startDate = new Date();\n  const endDate = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000); // Next 7 days\n  const availableSlots = await getAvailableTimeSlotsUseCase({ startDate, endDate });\n  \n  console.log(`\\nAvailable time slots (${availableSlots.length}):`);\n  availableSlots.forEach(slot => {\n    console.log(`  - ${slot.start.toLocaleString()} (${slot.duration} minutes)`);\n  });\n  \n  // 4. Schedule an appointment\n  console.log(\"\\n=== Scheduling Appointment ===\");\n  try {\n    const result = await scheduleAppointmentUseCase({\n      timeSlotId: availableSlots[0].id,\n      contactInfo: {\n        name: \"Alex Johnson\",\n        email: \"alex.johnson@example.com\",\n        phone: \"+1234567890\",\n        company: \"Tech Solutions Inc\",\n      },\n    });\n    \n    console.log(\"✓ Appointment scheduled successfully!\");\n    console.log(`  Appointment ID: ${result.appointmentId}`);\n    console.log(`  Booking Reference: ${result.bookingReference}`);\n    \n    // 5. Try to book the same slot again (should fail)\n    console.log(\"\\n=== Attempting to Book Same Slot ===\");\n    try {\n      await scheduleAppointmentUseCase({\n        timeSlotId: availableSlots[0].id,\n        contactInfo: {\n          name: \"Another Person\",\n          email: \"another@example.com\",\n          phone: \"+0987654321\",\n        },\n      });\n    } catch (error) {\n      console.log(\"✓ Correctly prevented double booking\");\n      console.log(`  Error: ${error.message}`);\n    }\n  } catch (error) {\n    console.error(\"✗ Failed to schedule appointment:\", error.message);\n  }\n  \n  console.log(\"\\n=== Example Complete ===\");\n}\n\n// Run the example\nrunBookingExample().catch(console.error);
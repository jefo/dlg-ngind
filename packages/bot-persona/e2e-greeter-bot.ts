import { setPortAdapter } from "@maxdev1/sotajs";
import { composeBotPersonaApp } from "./src/composition";
import { defineBotPersonaUseCase } from "./src/desing/application/define-bot-persona.use-case";
import { botPersonaDefinedOutPort } from "./src/desing/application/ports";
import { processUserInputUseCase } from "./src/runtime/application/process-user-input.use-case";
import { startConversationUseCase } from "./src/runtime/application/start-conversation.use-case";

// --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—à–µ–≥–æ "Greeter Bot" ---

const greeterBotDefinition = {
	name: "Greeter Bot",
	fsmDefinition: {
		initialStateId: "welcome",
		states: [{ id: "welcome" }, { id: "ask_name" }, { id: "greet_user" }],
		transitions: [
			{
				from: "welcome",
				event: "START",
				to: "ask_name",
			},
			{
				from: "ask_name",
				event: "SUBMIT_NAME",
				to: "greet_user",
				assign: { userName: "payload.name" }, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏–∑ payload –≤ formState
			},
		],
	},
	viewDefinition: {
		nodes: [
			{
				id: "welcome",
				component: "Message",
				props: { text: "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è." },
			},
			{
				id: "ask_name",
				component: "Message",
				props: { text: "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?" },
			},
			{
				id: "greet_user",
				component: "Message",
				// –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
				props: { text: "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, context.userName!" },
			},
		],
	},
	formDefinition: {
		id: "greeter-form",
		name: "Greeter Form",
		fields: [
			{
				id: "user-name-field",
				name: "userName", // –ö–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ `assign` –∏ `context.`
				type: "string",
				label: "User Name",
			},
		],
	},
};

// --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞ ---

async function runGreeterTest() {
	console.log("\n--- üöÄ Starting E2E Greeter Bot Test ---");

	// 1. –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
	composeBotPersonaApp();

	// 2. –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—Ç –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞.
	// –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –ü–û–°–õ–ï composeApp, —á—Ç–æ–±—ã –Ω–∞—à–∞ –ø–æ–¥–º–µ–Ω–∞ –Ω–µ –±—ã–ª–∞ –∑–∞—Ç–µ—Ä—Ç–∞.
	let createdPersonaId: string;
	setPortAdapter(botPersonaDefinedOutPort, async (dto) => {
		createdPersonaId = dto.personaId;
		console.log(`\n‚úÖ Bot Persona Defined: ${dto.name} (ID: ${dto.personaId})`);
	});

	// 3. –®–ê–ì 1: –û–ø—Ä–µ–¥–µ–ª—è–µ–º "–ª–∏—á–Ω–æ—Å—Ç—å" –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
	console.log("\n1Ô∏è‚É£  Defining Greeter Bot Persona...");

	await defineBotPersonaUseCase(greeterBotDefinition);

	if (!createdPersonaId) {
		console.error("‚ùå E2E Test Failed: Bot Persona ID was not captured.");
		return;
	}

	// 4. –®–ê–ì 2: –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥
	const chatId = "e2e-test-chat-1";
	console.log(`\n2Ô∏è‚É£  Starting conversation for chatId: ${chatId}...`);
	await startConversationUseCase({ botPersonaId: createdPersonaId, chatId });

	// 5. –®–ê–ì 3: –≠–º—É–ª–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å")
	console.log("\n3Ô∏è‚É£  Processing user event: START...");
	await processUserInputUseCase({ chatId, event: "START" });

	// 6. –®–ê–ì 4: –≠–º—É–ª–∏—Ä—É–µ–º –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
	const userName = "–î–∂–∞–º—à—É—Ç";
	console.log(`\n4Ô∏è‚É£  Processing user event: SUBMIT_NAME with payload: { name: "${userName}" }...`);
	await processUserInputUseCase({
		chatId,
		event: "SUBMIT_NAME",
		payload: { name: userName },
	});

	console.log("\n--- ‚úÖ E2E Greeter Bot Test Finished ---\n");
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
runGreeterTest();

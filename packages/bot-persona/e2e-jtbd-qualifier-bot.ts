import { setPortAdapter } from "@maxdev1/sotajs";
import { composeApp } from "./src/composition";
import { defineBotPersonaUseCase } from "./src/desing/application/define-bot-persona.use-case";
import { botPersonaDefinedOutPort } from "./src/desing/application/ports";
import { processUserInputUseCase } from "./src/runtime/application/process-user-input.use-case";
import { startConversationUseCase } from "./src/runtime/application/start-conversation.use-case";

// --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ "JTBD Lead Qualifier Bot v2" ---

const jtbdQualifierBotDefinition = {
	name: "JTBD Lead Qualifier Bot v2",
	formDefinition: {
		id: "jtbd-form-v2",
		name: "JTBD Form v2",
		fields: [
			{ id: "f-job", name: "job", type: "multiselect", label: "Job" },
			{ id: "f-context", name: "context", type: "multiselect", label: "Context" },
			{ id: "f-struggles", name: "struggles", type: "string", label: "Struggles" },
			{ id: "f-outcomes", name: "outcomes", type: "string", label: "Outcomes" },
			{ id: "f-extras", name: "extras", type: "multiselect", label: "Extras" },
			{ id: "f-timeline", name: "timeline", type: "string", label: "Timeline" },
			{ id: "f-budget", name: "budget", type: "string", label: "Budget" },
			// –ü–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ—Ü–µ–Ω–∫–∏
			{ id: "f-estimate", name: "estimate", type: "object", label: "Estimate" },
		],
	},
	fsmDefinition: {
		initialStateId: "welcome",
		states: [
			{ id: "welcome" },
			{ id: "ask_job" },
			{ id: "ask_context" },
			{ id: "ask_struggles" },
			{ id: "ask_outcomes" },
			{ id: "ask_extras" },
			{ id: "ask_timeline" },
			{ id: "ask_budget" },
			{ id: "show_estimate" },
			{ id: "show_summary" },
			{ id: "final_cta" },
			{ id: "goodbye" },
		],
		transitions: [
			{ from: "welcome", event: "START", to: "ask_job" },
			{ from: "ask_job", event: "SUBMIT_JOBS", to: "ask_context", assign: { job: "payload.selection" } },
			{ from: "ask_context", event: "SUBMIT_CONTEXTS", to: "ask_struggles", assign: { context: "payload.selection" } },
			{ from: "ask_struggles", event: "SUBMIT_STRUGGLES", to: "ask_outcomes", assign: { struggles: "payload.text" } },
			{ from: "ask_outcomes", event: "SUBMIT_OUTCOMES", to: "ask_extras", assign: { outcomes: "payload.text" } },
      // –ò–∑–º–µ–Ω–µ–Ω –ø–æ—Ä—è–¥–æ–∫: —Å–Ω–∞—á–∞–ª–∞ —Ñ–∏—á–∏, –ø–æ—Ç–æ–º —Å—Ä–æ–∫–∏ –∏ –±—é–¥–∂–µ—Ç
			{ from: "ask_extras", event: "SUBMIT_EXTRAS", to: "ask_timeline", assign: { extras: "payload.selection" } },
			{ from: "ask_timeline", event: "SELECT_TIMELINE", to: "ask_budget", assign: { timeline: "payload.selection" } },

      // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è CRM –≤ `extras`
			{
				from: "ask_budget",
				event: "SELECT_BUDGET",
				to: "show_estimate",
				assign: { budget: "payload.selection", estimate: "{ price: \"$1500-$2500\", timeline: \"4-6 –Ω–µ–¥–µ–ª—å\" }" },
				cond: { field: "extras", operator: "contains", value: "crm" },
			},
			{
				from: "ask_budget",
				event: "SELECT_BUDGET",
				to: "show_estimate",
				assign: { budget: "payload.selection", estimate: "{ price: \"$800-$1200\", timeline: \"3-4 –Ω–µ–¥–µ–ª–∏\" }" },
			},

			{ from: "show_estimate", event: "CONTINUE", to: "show_summary" },
			{ from: "show_summary", event: "CONTINUE", to: "final_cta" },
			{ from: "final_cta", event: "ACCEPT_DEMO", to: "goodbye" },
			{ from: "final_cta", event: "DECLINE_DEMO", to: "goodbye" },
		],
	},
	viewDefinition: {
		nodes: [
			{ id: "welcome", component: "Message", props: { text: "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–Ω—è—Ç—å, –∫–∞–∫–æ–π –±–æ—Ç –Ω—É–∂–µ–Ω –∏–º–µ–Ω–Ω–æ –≤–∞—à–µ–º—É –±–∏–∑–Ω–µ—Å—É. –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 3‚Äì5 –º–∏–Ω—É—Ç. –ü–æ–µ—Ö–∞–ª–∏?", buttons: [{ label: "–ü–æ–µ—Ö–∞–ª–∏!", event: "START" }] } },
      // –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" –¥–ª—è –º—É–ª—å—Ç–∏-—Å–µ–ª–µ–∫—Ç–∞
			{ id: "ask_job", component: "Message", props: { text: "–ö–∞–∫—É—é –∑–∞–¥–∞—á—É –¥–æ–ª–∂–µ–Ω —Ä–µ—à–∞—Ç—å –≤–∞—à –±–æ—Ç? (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)", buttons: [{ label: "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –ª–∏–¥–æ–≤"}, { label: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ (FAQ)"}, { label: "–î–∞–ª–µ–µ", event: "SUBMIT_JOBS", payload: { selection: ["qualification", "support"] } }] } },
			{ id: "ask_context", component: "Message", props: { text: "–ê –≥–¥–µ –∏–º–µ–Ω–Ω–æ –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å? (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)", buttons: [{ label: "Telegram"}, { label: "–í–µ–±-—Å–∞–π—Ç"}, { label: "–î–∞–ª–µ–µ", event: "SUBMIT_CONTEXTS", payload: { selection: ["telegram", "website"] } }] } },
      // –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏
			{ id: "ask_struggles", component: "Message", props: { text: "–ö–∞–∫–∏–µ —É–∑–∫–∏–µ –º–µ—Å—Ç–∞ –≤ –≤–∞—à–µ–π –≤–æ—Ä–æ–Ω–∫–µ –ø—Ä–æ–¥–∞–∂ –∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö –≤—ã –≤–∏–¥–∏—Ç–µ —Å–µ–π—á–∞—Å?", buttons: [{ label: "–î–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞—è–≤–∫–∏", event: "SUBMIT_STRUGGLES", payload: { text: "–î–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞—è–≤–∫–∏" } }, { label: "–¢–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤", event: "SUBMIT_STRUGGLES", payload: { text: "–¢–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤" } }] } },
			{ id: "ask_outcomes", component: "Message", props: { text: "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∫–∞–∫–∏—Ö KPI –±—É–¥–µ—Ç –¥–ª—è –≤–∞—Å –∏–¥–µ–∞–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞?", buttons: [{ label: "–†–æ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏", event: "SUBMIT_OUTCOMES", payload: { text: "–†–æ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏" } }, { label: "–°–Ω–∏–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞", event: "SUBMIT_OUTCOMES", payload: { text: "–°–Ω–∏–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞" } }] } },
			{ id: "ask_extras", component: "Message", props: { text: "–•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è –ø—Ä–µ–¥–ª–æ–∂–∏–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏? (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)", buttons: [{ label: "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM"}, { label: "–°–±–æ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"}, { label: "–î–∞–ª–µ–µ", event: "SUBMIT_EXTRAS", payload: { selection: ["crm", "analytics"] } }] } },
			{ id: "ask_timeline", component: "Message", props: { text: "–ö–∞–∫–∏–µ —É –≤–∞—Å —Å—Ä–æ–∫–∏ –∑–∞–ø—É—Å–∫–∞?", buttons: [{ label: "–°—Ä–æ—á–Ω–æ (1‚Äì2 –Ω–µ–¥–µ–ª–∏)", event: "SELECT_TIMELINE", payload: { selection: "urgent" } }, { label: "–í —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞", event: "SELECT_TIMELINE", payload: { selection: "month" } }] } },
			{ id: "ask_budget", component: "Message", props: { text: "–ê –∫–∞–∫–æ–π —É –≤–∞—Å –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ –ø—Ä–æ–µ–∫—Ç?", buttons: [{ label: "–¥–æ $1500", event: "SELECT_BUDGET", payload: { selection: "<1500" } }, { label: "$1500+", event: "SELECT_BUDGET", payload: { selection: ">1500" } }] } },
      // –í—å—é—Ö–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ç–µ–ø–µ—Ä—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è
			{ id: "show_estimate", component: "Message", props: { text: "–°–ø–∞—Å–∏–±–æ! –ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤, –ø—Ä–æ–µ–∫—Ç –æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç context.estimate.timeline –∏ —Å—Ç–æ–∏—Ç context.estimate.price. –≠—Ç–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞.", buttons: [{ label: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", event: "CONTINUE" }] } },
			{ id: "show_summary", component: "Message", props: { text: "–°–ø–∞—Å–∏–±–æ üôè! –í–æ—Ç —Ä–µ–∑—é–º–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏:\nüéØ –¶–µ–ª—å: context.job\nüí∞ –ë—é–¥–∂–µ—Ç: context.budget\n‚è≥ –°—Ä–æ–∫–∏: context.timeline", buttons: [{ label: "–í—Å–µ –≤–µ—Ä–Ω–æ!", event: "CONTINUE" }] } },
			{ id: "final_cta", component: "Message", props: { text: "–Ø –ø–µ—Ä–µ–¥–∞–º —ç—Ç–æ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É. –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–µ–º–æ-–ø—Ä–æ—Ç–æ—Ç–∏–ø –≤–∞—à–µ–≥–æ –±—É–¥—É—â–µ–≥–æ –±–æ—Ç–∞?", buttons: [{ label: "–î–∞, —Ö–æ—á—É –¥–µ–º–æ!", event: "ACCEPT_DEMO" }, { label: "–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ", event: "DECLINE_DEMO" }] } },
			{ id: "goodbye", component: "Message", props: { text: "–û—Ç–ª–∏—á–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ —É–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!" } },
		],
	},
};


async function runJtbdQualifierTestV2() {
	console.log("\n--- üöÄ Starting E2E JTBD Qualifier Bot Test v2 ---");

	composeApp();

	let createdPersonaId: string;
	setPortAdapter(botPersonaDefinedOutPort, async (dto) => {
		createdPersonaId = dto.personaId;
		console.log(`\n‚úÖ Bot Persona Defined: ${dto.name} (ID: ${dto.personaId})`);
	});

	console.log("\n1Ô∏è‚É£  Defining JTBD Qualifier Bot Persona v2...");
	await defineBotPersonaUseCase(jtbdQualifierBotDefinition);

	if (!createdPersonaId) {
		console.error("‚ùå E2E Test Failed: Bot Persona ID was not captured.");
		return;
	}

	const chatId = "e2e-jtbd-chat-v2";

	console.log(`\n2Ô∏è‚É£  Starting conversation for chatId: ${chatId}...`);
	await startConversationUseCase({ botPersonaId: createdPersonaId, chatId });

	// 3. –≠–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–≤–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é
	console.log("\n‚û°Ô∏è  Event: START");
	await processUserInputUseCase({ chatId, event: "START" });

	console.log("\n‚û°Ô∏è  Event: SUBMIT_JOBS");
	await processUserInputUseCase({ chatId, event: "SUBMIT_JOBS", payload: { selection: ["qualification", "support"] } });

	console.log("\n‚û°Ô∏è  Event: SUBMIT_CONTEXTS");
	await processUserInputUseCase({ chatId, event: "SUBMIT_CONTEXTS", payload: { selection: ["website"] } });

	console.log("\n‚û°Ô∏è  Event: SUBMIT_STRUGGLES");
	await processUserInputUseCase({ chatId, event: "SUBMIT_STRUGGLES", payload: { text: "–¢–µ—Ä—è–µ–º –ª–∏–¥–æ–≤ –ø–æ –Ω–æ—á–∞–º" } });

	console.log("\n‚û°Ô∏è  Event: SUBMIT_OUTCOMES");
	await processUserInputUseCase({ chatId, event: "SUBMIT_OUTCOMES", payload: { text: "–í—Å–µ –ª–∏–¥—ã –≤ CRM" } });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Å CRM
	console.log("\n‚û°Ô∏è  Event: SUBMIT_EXTRAS");
	await processUserInputUseCase({ chatId, event: "SUBMIT_EXTRAS", payload: { selection: ["crm", "analytics"] } });

	console.log("\n‚û°Ô∏è  Event: SELECT_TIMELINE");
	await processUserInputUseCase({ chatId, event: "SELECT_TIMELINE", payload: { selection: "month" } });

	console.log("\n‚û°Ô∏è  Event: SELECT_BUDGET");
	await processUserInputUseCase({ chatId, event: "SELECT_BUDGET", payload: { selection: ">1500" } });

	console.log("\n‚û°Ô∏è  Event: CONTINUE (after estimate)");
	await processUserInputUseCase({ chatId, event: "CONTINUE" });

	console.log("\n‚û°Ô∏è  Event: CONTINUE (after summary)");
	await processUserInputUseCase({ chatId, event: "CONTINUE" });

	console.log("\n‚û°Ô∏è  Event: ACCEPT_DEMO");
	await processUserInputUseCase({ chatId, event: "ACCEPT_DEMO" });

	console.log("\n--- ‚úÖ E2E JTBD Qualifier Bot Test v2 Finished ---\\n");
}

runJtbdQualifierTestV2();
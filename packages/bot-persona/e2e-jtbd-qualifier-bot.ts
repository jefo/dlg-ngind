import { setPortAdapter } from "@maxdev1/sotajs";
import { composeApp } from "./src/composition";
import { defineBotPersonaUseCase } from "./src/desing/application/define-bot-persona.use-case";
import { botPersonaDefinedOutPort } from "./src/desing/application/ports";
import { processUserInputUseCase } from "./src/runtime/application/process-user-input.use-case";
import { startConversationUseCase } from "./src/runtime/application/start-conversation.use-case";

// --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ "JTBD Lead Qualifier Bot" ---

const jtbdQualifierBotDefinition = {
	name: "JTBD Lead Qualifier Bot",
	formDefinition: {
		id: "jtbd-form",
		name: "JTBD Form",
		fields: [
			{ id: "f-job", name: "job", type: "multiselect", label: "Job" },
			{ id: "f-context", name: "context", type: "multiselect", label: "Context" },
			{ id: "f-struggles", name: "struggles", type: "string", label: "Struggles" },
			{ id: "f-outcomes", name: "outcomes", type: "string", label: "Outcomes" },
			{ id: "f-budget", name: "budget", type: "string", label: "Budget" },
			{ id: "f-timeline", name: "timeline", type: "string", label: "Timeline" },
			{ id: "f-extras", name: "extras", type: "multiselect", label: "Extras" },
		],
	},
	fsmDefinition: {
		initialStateId: "welcome",
		states: [
			{ id: "welcome" },
			{ id: "ask_job" },
			{ id: "ask_context" },
			{ id: "ask_struggles" },
			{ id: "ask_outcomes" },
			{ id: "ask_budget" },
			{ id: "ask_timeline" },
			{ id: "ask_extras" },
			{ id: "show_estimate" },
			{ id: "show_summary" },
			{ id: "final_cta" },
			{ id: "goodbye" },
		],
		transitions: [
			{ from: "welcome", event: "START", to: "ask_job" },
			{ from: "ask_job", event: "SELECT_JOB", to: "ask_context", assign: { job: "payload.selection" } },
			{ from: "ask_context", event: "SELECT_CONTEXT", to: "ask_struggles", assign: { context: "payload.selection" } },
			{ from: "ask_struggles", event: "SUBMIT_STRUGGLES", to: "ask_outcomes", assign: { struggles: "payload.text" } },
			{ from: "ask_outcomes", event: "SUBMIT_OUTCOMES", to: "ask_budget", assign: { outcomes: "payload.text" } },
			{ from: "ask_budget", event: "SELECT_BUDGET", to: "ask_timeline", assign: { budget: "payload.selection" } },
			{ from: "ask_timeline", event: "SELECT_TIMELINE", to: "ask_extras", assign: { timeline: "payload.selection" } },
			{ from: "ask_extras", event: "SELECT_EXTRAS", to: "show_estimate", assign: { extras: "payload.selection" } },
      // –£—Å–ª–æ–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –¥–æ–±–∞–≤–∏–ª–∏!
			{
				from: "show_estimate",
				event: "CONTINUE",
				to: "show_summary",
        // –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è cond. –ü–µ—Ä–µ–π–¥–µ—Ç —Å—é–¥–∞, –µ—Å–ª–∏ –±—é–¥–∂–µ—Ç –ù–ï "–µ—â–µ –Ω–µ –∑–Ω–∞—é"
				cond: { field: "budget", operator: "not_equals", value: "not_decided" },
			},
      {
				from: "show_estimate",
				event: "CONTINUE",
				to: "goodbye", // –°—Ä–∞–∑—É –ø—Ä–æ—â–∞–µ–º—Å—è, –µ—Å–ª–∏ –±—é–¥–∂–µ—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
			},
			{ from: "show_summary", event: "CONTINUE", to: "final_cta" },
			{ from: "final_cta", event: "ACCEPT_DEMO", to: "goodbye" },
			{ from: "final_cta", event: "DECLINE_DEMO", to: "goodbye" },
		],
	},
	viewDefinition: {
		nodes: [
			{ id: "welcome", component: "Message", props: { text: "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–Ω—è—Ç—å, –∫–∞–∫–æ–π –±–æ—Ç –Ω—É–∂–µ–Ω –∏–º–µ–Ω–Ω–æ –≤–∞—à–µ–º—É –±–∏–∑–Ω–µ—Å—É. –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 3‚Äì5 –º–∏–Ω—É—Ç. –ü–æ–µ—Ö–∞–ª–∏?", buttons: [{ label: "–ü–æ–µ—Ö–∞–ª–∏!", event: "START" }] } },
			{ id: "ask_job", component: "Message", props: { text: "–ö–∞–∫—É—é –∑–∞–¥–∞—á—É –¥–æ–ª–∂–µ–Ω —Ä–µ—à–∞—Ç—å –≤–∞—à –±–æ—Ç?", buttons: [{ label: "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –ª–∏–¥–æ–≤", event: "SELECT_JOB", payload: { selection: "qualification" } }, { label: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ (FAQ)", event: "SELECT_JOB", payload: { selection: "support" } }] } },
			{ id: "ask_context", component: "Message", props: { text: "–ê –≥–¥–µ –∏–º–µ–Ω–Ω–æ –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å?", buttons: [{ label: "Telegram", event: "SELECT_CONTEXT", payload: { selection: "telegram" } }, { label: "–í–µ–±-—Å–∞–π—Ç", event: "SELECT_CONTEXT", payload: { selection: "website" } }] } },
			{ id: "ask_struggles", component: "Message", props: { text: "–° –∫–∞–∫–∏–º–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏ –≤—ã —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç–µ—Å—å –±–µ–∑ –±–æ—Ç–∞?" } },
			{ id: "ask_outcomes", component: "Message", props: { text: "–ö–∞–∫ –≤—ã –ø–æ–π–º—ë—Ç–µ, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ?" } },
			{ id: "ask_budget", component: "Message", props: { text: "–ê –∫–∞–∫–æ–π —É –≤–∞—Å –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ –ø—Ä–æ–µ–∫—Ç?", buttons: [{ label: "–¥–æ $500", event: "SELECT_BUDGET", payload: { selection: "<500" } }, { label: "$500‚Äì1500", event: "SELECT_BUDGET", payload: { selection: "500-1500" } }, { label: "–ï—â—ë –Ω–µ –∑–Ω–∞—é", event: "SELECT_BUDGET", payload: { selection: "not_decided" } }] } },
			{ id: "ask_timeline", component: "Message", props: { text: "–ö–∞–∫–∏–µ —É –≤–∞—Å —Å—Ä–æ–∫–∏ –∑–∞–ø—É—Å–∫–∞?", buttons: [{ label: "–°—Ä–æ—á–Ω–æ (1‚Äì2 –Ω–µ–¥–µ–ª–∏)", event: "SELECT_TIMELINE", payload: { selection: "urgent" } }, { label: "–í —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞", event: "SELECT_TIMELINE", payload: { selection: "month" } }] } },
			{ id: "ask_extras", component: "Message", props: { text: "–•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è –ø—Ä–µ–¥–ª–æ–∂–∏–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏?", buttons: [{ label: "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM", event: "SELECT_EXTRAS", payload: { selection: "crm" } }, { label: "–ù–µ—Ç, —Ç–æ–ª—å–∫–æ –±–∞–∑–∞", event: "SELECT_EXTRAS", payload: { selection: "none" } }] } },
      // –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
			{ id: "show_estimate", component: "Message", props: { text: "–°–ø–∞—Å–∏–±–æ! –ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤, –ø—Ä–æ–µ–∫—Ç –æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç 3-4 –Ω–µ–¥–µ–ª–∏ –∏ —Å—Ç–æ–∏—Ç $800-$1200. –≠—Ç–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞.", buttons: [{ label: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", event: "CONTINUE" }] } },
			{ id: "show_summary", component: "Message", props: { text: "–°–ø–∞—Å–∏–±–æ üôè! –í–æ—Ç —Ä–µ–∑—é–º–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏:\nüéØ –¶–µ–ª—å: context.job\nüí∞ –ë—é–¥–∂–µ—Ç: context.budget\n‚è≥ –°—Ä–æ–∫–∏: context.timeline", buttons: [{ label: "–í—Å–µ –≤–µ—Ä–Ω–æ!", event: "CONTINUE" }] } },
			{ id: "final_cta", component: "Message", props: { text: "–Ø –ø–µ—Ä–µ–¥–∞–º —ç—Ç–æ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É. –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–µ–º–æ-–ø—Ä–æ—Ç–æ—Ç–∏–ø –≤–∞—à–µ–≥–æ –±—É–¥—É—â–µ–≥–æ –±–æ—Ç–∞?", buttons: [{ label: "–î–∞, —Ö–æ—á—É –¥–µ–º–æ!", event: "ACCEPT_DEMO" }, { label: "–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ", event: "DECLINE_DEMO" }] } },
			{ id: "goodbye", component: "Message", props: { text: "–û—Ç–ª–∏—á–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ —É–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!" } },
		],
	},
};

// --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞ ---

async function runJtbdQualifierTest() {
	console.log("\n--- üöÄ Starting E2E JTBD Qualifier Bot Test ---");

	composeApp();

	let createdPersonaId: string;
	setPortAdapter(botPersonaDefinedOutPort, async (dto) => {
		createdPersonaId = dto.personaId;
		console.log(`\n‚úÖ Bot Persona Defined: ${dto.name} (ID: ${dto.personaId})`);
	});

	// 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º "–ª–∏—á–Ω–æ—Å—Ç—å" –±–æ—Ç–∞
	console.log("\n1Ô∏è‚É£  Defining JTBD Qualifier Bot Persona...");
	await defineBotPersonaUseCase(jtbdQualifierBotDefinition);

	if (!createdPersonaId) {
		console.error("‚ùå E2E Test Failed: Bot Persona ID was not captured.");
		return;
	}

	const chatId = "e2e-jtbd-chat-1";

	// 2. –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥
	console.log(`\n2Ô∏è‚É£  Starting conversation for chatId: ${chatId}...`);
	await startConversationUseCase({ botPersonaId: createdPersonaId, chatId });

	// 3. –≠–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é
	console.log("\n‚û°Ô∏è  Event: START");
	await processUserInputUseCase({ chatId, event: "START" });

	console.log("\n‚û°Ô∏è  Event: SELECT_JOB");
	await processUserInputUseCase({ chatId, event: "SELECT_JOB", payload: { selection: "qualification" } });

	console.log("\n‚û°Ô∏è  Event: SELECT_CONTEXT");
	await processUserInputUseCase({ chatId, event: "SELECT_CONTEXT", payload: { selection: "website" } });

	console.log("\n‚û°Ô∏è  Event: SUBMIT_STRUGGLES");
	await processUserInputUseCase({ chatId, event: "SUBMIT_STRUGGLES", payload: { text: "–¢–µ—Ä—è–µ–º –ª–∏–¥–æ–≤ –ø–æ –Ω–æ—á–∞–º" } });

	console.log("\n‚û°Ô∏è  Event: SUBMIT_OUTCOMES");
	await processUserInputUseCase({ chatId, event: "SUBMIT_OUTCOMES", payload: { text: "–í—Å–µ –ª–∏–¥—ã –≤ CRM" } });

	console.log("\n‚û°Ô∏è  Event: SELECT_BUDGET");
	await processUserInputUseCase({ chatId, event: "SELECT_BUDGET", payload: { selection: "500-1500" } });

	console.log("\n‚û°Ô∏è  Event: SELECT_TIMELINE");
	await processUserInputUseCase({ chatId, event: "SELECT_TIMELINE", payload: { selection: "month" } });

	console.log("\n‚û°Ô∏è  Event: SELECT_EXTRAS");
	await processUserInputUseCase({ chatId, event: "SELECT_EXTRAS", payload: { selection: "crm" } });

	console.log("\n‚û°Ô∏è  Event: CONTINUE (after estimate)");
	await processUserInputUseCase({ chatId, event: "CONTINUE" });

	console.log("\n‚û°Ô∏è  Event: CONTINUE (after summary)");
	await processUserInputUseCase({ chatId, event: "CONTINUE" });

	console.log("\n‚û°Ô∏è  Event: ACCEPT_DEMO");
	await processUserInputUseCase({ chatId, event: "ACCEPT_DEMO" });

	console.log("\n--- ‚úÖ E2E JTBD Qualifier Bot Test Finished ---\n");
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
runJtbdQualifierTest();

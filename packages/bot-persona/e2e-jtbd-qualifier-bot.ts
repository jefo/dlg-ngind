import { setPortAdapter, usePort } from "@maxdev1/sotajs";
import { composeApp } from "./src/composition";
import { defineBotPersonaUseCase } from "./src/desing/application/define-bot-persona.use-case";
import { botPersonaDefinedOutPort } from "./src/desing/application/ports";
import { processUserInputUseCase } from "./src/runtime/application/process-user-input.use-case";
import { startNurturingSequenceOutPort } from "./src/runtime/application/ports";
import { startConversationUseCase } from "./src/runtime/application/start-conversation.use-case";

// --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ "JTBD Lead Qualifier Bot v1.1" ---

const jtbdQualifierBotDefinition = {
	name: "JTBD Lead Qualifier Bot v1.1",
	formDefinition: {
		id: "jtbd-form-v1.1",
		name: "JTBD Form v1.1",
		fields: [
			{ id: "f-name", name: "name", type: "string", label: "Name" },
			{ id: "f-job", name: "job", type: "multiselect", label: "Job" },
			{ id: "f-context", name: "context", type: "multiselect", label: "Context" },
			{ id: "f-struggles", name: "struggles", type: "string", label: "Struggles" },
			{ id: "f-outcomes", name: "outcomes", type: "string", label: "Outcomes" },
			{ id: "f-extras", name: "extras", type: "multiselect", label: "Extras" },
			{ id: "f-timeline", name: "timeline", type: "string", label: "Timeline" },
			{ id: "f-budget", name: "budget", type: "string", label: "Budget" },
			{ id: "f-estimate", name: "estimate", type: "object", label: "Estimate" },
			{ id: "f-recommended_model", name: "recommendedModel", type: "string", label: "Recommended Model" },
		],
	},
	fsmDefinition: {
		initialStateId: "welcome",
		states: [
			{ id: "welcome" },
			{ id: "ask_name" },
			{ id: "ask_job" },
			{ id: "ask_context" },
			{ id: "ask_struggles" },
			{ id: "ask_outcomes" },
			{ id: "ask_extras" },
			{ id: "ask_timeline" },
			{ id: "ask_budget" },
			{ id: "pre_offer" },
			{ id: "ask_show_examples" },
			{ id: "show_examples" },
			{ id: "book_call" },
			{ id: "nurturing_goodbye" },
			{ id: "simple_goodbye" },
		],
		transitions: [
			{ from: "welcome", event: "START", to: "ask_name" },
			{ from: "ask_name", event: "SUBMIT_NAME", to: "ask_job", assign: { name: "payload.text" } },
			{ from: "ask_job", event: "SUBMIT_JOBS", to: "ask_context", assign: { job: "payload.selection" } },
			{ from: "ask_context", event: "SUBMIT_CONTEXTS", to: "ask_struggles", assign: { context: "payload.selection" } },
			{ from: "ask_struggles", event: "SUBMIT_STRUGGLES", to: "ask_outcomes", assign: { struggles: "payload.text" } },
			{ from: "ask_outcomes", event: "SUBMIT_OUTCOMES", to: "ask_extras", assign: { outcomes: "payload.text" } },
			{ from: "ask_extras", event: "SUBMIT_EXTRAS", to: "ask_timeline", assign: { extras: "payload.selection" } },
			{ from: "ask_timeline", event: "SELECT_TIMELINE", to: "ask_budget", assign: { timeline: "payload.selection" } },

			// –†–∞—Å—á–µ—Ç –ø—Ä–µ-–æ—Ñ—Ñ–µ—Ä–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –µ–≥–æ –ø–æ–∫–∞–∑—É
			{
				from: "ask_budget",
				event: "SELECT_BUDGET",
				to: "pre_offer",
				assign: { budget: "payload.selection", estimate: { price: "$1500-$2500", timeline: "4-6 –Ω–µ–¥–µ–ª—å" }, recommendedModel: "–ë–æ—Ç –¥–ª—è SaaS-—Ç—Ä–∏–∞–ª–∞" },
				cond: { field: "extras", operator: "contains", value: "crm" },
			},
			{
				from: "ask_budget",
				event: "SELECT_BUDGET",
				to: "pre_offer",
				assign: { budget: "payload.selection", estimate: { price: "$800-$1200", timeline: "3-4 –Ω–µ–¥–µ–ª–∏" }, recommendedModel: "–ë–æ—Ç –¥–ª—è –≤–µ–±–∏–Ω–∞—Ä–Ω–æ–π –≤–æ—Ä–æ–Ω–∫–∏" },
			},

			// –í–µ—Ç–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–µ-–æ—Ñ—Ñ–µ—Ä–∞
			{ from: "pre_offer", event: "CONTINUE", to: "ask_show_examples" },
			{ from: "pre_offer", event: "TOO_EXPENSIVE", to: "nurturing_goodbye" },

			{ from: "ask_show_examples", event: "ACCEPT_EXAMPLES", to: "show_examples" },
			{ from: "ask_show_examples", event: "DECLINE_EXAMPLES", to: "book_call" },

			{ from: "show_examples", event: "CONTINUE", to: "book_call" },
			{ from: "book_call", event: "BOOK_CALL", to: "simple_goodbye" },
		],
	},
	viewDefinition: {
		nodes: [
			{ id: "welcome", component: "Message", props: { text: "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–Ω—è—Ç—å, –∫–∞–∫–æ–π –±–æ—Ç –Ω—É–∂–µ–Ω –∏–º–µ–Ω–Ω–æ –≤–∞—à–µ–º—É –±–∏–∑–Ω–µ—Å—É. –ü–æ–µ—Ö–∞–ª–∏?", buttons: [{ label: "–ü–æ–µ—Ö–∞–ª–∏!", event: "START" }] } },
			{ id: "ask_name", component: "Message", props: { text: "–î–ª—è –Ω–∞—á–∞–ª–∞, –∫–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?" } },
			{ id: "ask_job", component: "Message", props: { text: "–ö–∞–∫—É—é –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É –¥–æ–ª–∂–µ–Ω —Ä–µ—à–∞—Ç—å –≤–∞—à –±–æ—Ç? (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)", buttons: [{ label: "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –ª–∏–¥–æ–≤" }, { label: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ (FAQ)" }, { label: "–î–∞–ª–µ–µ", event: "SUBMIT_JOBS", payload: { selection: ["qualification", "support"] } }] } },
			{ id: "ask_context", component: "Message", props: { text: "–ê –≥–¥–µ –∏–º–µ–Ω–Ω–æ –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å?", buttons: [{ label: "Telegram" }, { label: "–í–µ–±-—Å–∞–π—Ç" }, { label: "–î–∞–ª–µ–µ", event: "SUBMIT_CONTEXTS", payload: { selection: ["website"] } }] } },
			{ id: "ask_struggles", component: "Message", props: { text: "–ü–æ–Ω—è–ª. –ö–∞–∫–∏–µ —É–∑–∫–∏–µ –º–µ—Å—Ç–∞ –≤ –≤–∞—à–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö –≤—ã –≤–∏–¥–∏—Ç–µ —Å–µ–π—á–∞—Å?", buttons: [{ label: "–î–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞—è–≤–∫–∏", event: "SUBMIT_STRUGGLES", payload: { text: "–î–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞—è–≤–∫–∏" } }] } },
			{ id: "ask_outcomes", component: "Message", props: { text: "–û–∫. –ê –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∫–∞–∫–∏—Ö KPI –±—É–¥–µ—Ç –¥–ª—è –≤–∞—Å –∏–¥–µ–∞–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º?", buttons: [{ label: "–†–æ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏", event: "SUBMIT_OUTCOMES", payload: { text: "–†–æ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏" } }] } },
			{ id: "ask_extras", component: "Message", props: { text: "–ù—É–∂–Ω—ã –ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏?", buttons: [{ label: "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM" }, { label: "–°–±–æ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏" }, { label: "–î–∞–ª–µ–µ", event: "SUBMIT_EXTRAS", payload: { selection: ["crm", "analytics"] } }] } },
			{ id: "ask_timeline", component: "Message", props: { text: "–ö–∞–∫–∏–µ —É –≤–∞—Å –∂–µ–ª–∞–µ–º—ã–µ —Å—Ä–æ–∫–∏ –∑–∞–ø—É—Å–∫–∞?", buttons: [{ label: "–í —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞", event: "SELECT_TIMELINE", payload: { selection: "month" } }] } },
			{ id: "ask_budget", component: "Message", props: { text: "–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ. –í –∫–∞–∫–æ–π –±—é–¥–∂–µ—Ç –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —É–ª–æ–∂–∏—Ç—å—Å—è?", buttons: [{ label: "$1500+", event: "SELECT_BUDGET", payload: { selection: ">1500" } }] } },

			// –®–∞–≥ —Å –ø—Ä–µ-–æ—Ñ—Ñ–µ—Ä–æ–º
			{ id: "pre_offer", component: "Message", props: { text: "–°–ø–∞—Å–∏–±–æ, context.name! –ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤, –≤–∞–º –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –º–æ–¥–µ–ª—å **context.recommendedModel**. –û–±—ã—á–Ω–æ —Ç–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã —Å—Ç–æ—è—Ç **context.estimate.price** –∏ –∑–∞–Ω–∏–º–∞—é—Ç **context.estimate.timeline**. –≠—Ç–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞.", buttons: [{ label: "–ó–≤—É—á–∏—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!", event: "CONTINUE" }, { label: "–°–ø–∞—Å–∏–±–æ, –ø–æ–∫–∞ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ", event: "TOO_EXPENSIVE" }] } },

			{ id: "ask_show_examples", component: "Message", props: { text: "–•–æ—Ç–∏—Ç–µ, —è –ø–æ–∫–∞–∂—É –≤–∞–º –ø—Ä–∏–º–µ—Ä—ã –ø–æ–¥–æ–±–Ω—ã—Ö –±–æ—Ç–æ–≤ –≤ –¥–µ–π—Å—Ç–≤–∏–∏?", buttons: [{ label: "–î–∞, –ø–æ–∫–∞–∂–∏", event: "ACCEPT_EXAMPLES" }, { label: "–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ", event: "DECLINE_EXAMPLES" }] } },
			{ id: "show_examples", component: "Message", props: { text: "–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–µ–π—Å: [—Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–µ–π—Å]. –ò–∑—É—á–∏—Ç–µ, –∏ –¥–∞–π—Ç–µ –º–Ω–µ –∑–Ω–∞—Ç—å, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", buttons: [{ label: "–ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", event: "CONTINUE" }] } },
			{ id: "book_call", component: "Message", props: { text: "–°—É–ø–µ—Ä! –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥ ‚Äî –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –∑–≤–æ–Ω–æ–∫ —Å –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π. –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—å: [—Å—Å—ã–ª–∫–∞ –Ω–∞ Calendly]", buttons: [{ label: "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª!", event: "BOOK_CALL" }] } },

			// –ü—Ä–æ—â–∞–Ω–∏—è
			{ id: "nurturing_goodbye", component: "Message", props: { text: "–ü–æ–Ω–∏–º–∞—é. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ —É–¥–µ–ª–∏–ª–∏ –≤—Ä–µ–º—è! –ß—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –ª—É—á—à–µ –æ—Ü–µ–Ω–∏—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, —è –±—É–¥—É –∏–Ω–æ–≥–¥–∞ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!" } },
			{ id: "simple_goodbye", component: "Message", props: { text: "–û—Ç–ª–∏—á–Ω–æ! –†–∞–¥—ã –±—É–¥–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!" } },
		],
	},
};

// –ü—Ä–æ—Å—Ç–æ–∞—è –∑–∞–º–µ–Ω–∞ –¥–ª—è jest.fn() –≤ –æ–±—ã—á–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ
const createMock = () => {
	const calls: any[] = [];
	const fn = (...args: any[]) => {
		calls.push(args);
	};
	fn.mock = {
		calls: calls,
	};
	return fn;
};

async function runJtbdQualifierTestFinal() {
	console.log("\n--- üöÄ Starting E2E JTBD Qualifier Bot Test (Final) ---");

	composeApp();

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É –ø—Ä–æ—Å—Ç—É—é –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏—é
	const startNurturingMock = createMock();
	setPortAdapter(startNurturingSequenceOutPort, startNurturingMock as any);

	let createdPersonaId: string;
	setPortAdapter(botPersonaDefinedOutPort, async (dto) => {
		createdPersonaId = dto.personaId;
	});

	await defineBotPersonaUseCase(jtbdQualifierBotDefinition);

	const chatId = "e2e-jtbd-chat-final";
	await startConversationUseCase({ botPersonaId: createdPersonaId, chatId });

	// --- –°—Ü–µ–Ω–∞—Ä–∏–π 1: –£—Å–ø–µ—à–Ω–∞—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è ---
	console.log("\n--- Êºî Scenario 1: Successful Qualification ---");
	await processUserInputUseCase({ chatId, event: "START" });
	await processUserInputUseCase({ chatId, event: "SUBMIT_NAME", payload: { text: "–ü–µ—Ç—Ä" } });
	await processUserInputUseCase({ chatId, event: "SUBMIT_JOBS", payload: { selection: ["qualification"] } });
	await processUserInputUseCase({ chatId, event: "SUBMIT_CONTEXTS", payload: { selection: ["website"] } });
	await processUserInputUseCase({ chatId, event: "SUBMIT_STRUGGLES", payload: { text: "–ù–∏–∑–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è" } });
	await processUserInputUseCase({ chatId, event: "SUBMIT_OUTCOMES", payload: { text: "–†–æ—Å—Ç –ª–∏–¥–æ–≤" } });
	await processUserInputUseCase({ chatId, event: "SUBMIT_EXTRAS", payload: { selection: ["crm"] } }); // –í—ã–±–∏—Ä–∞–µ–º CRM
	await processUserInputUseCase({ chatId, event: "SELECT_TIMELINE", payload: { selection: "month" } });
	await processUserInputUseCase({ chatId, event: "SELECT_BUDGET", payload: { selection: ">1500" } }); // –ë—é–¥–∂–µ—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç
	await processUserInputUseCase({ chatId, event: "CONTINUE" }); // –°–æ–≥–ª–∞—à–∞–µ–º—Å—è —Å –ø—Ä–µ-–æ—Ñ—Ñ–µ—Ä–æ–º
	await processUserInputUseCase({ chatId, event: "ACCEPT_EXAMPLES" }); // –°–æ–≥–ª–∞—à–∞–µ–º—Å—è –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã
	await processUserInputUseCase({ chatId, event: "CONTINUE" });
	await processUserInputUseCase({ chatId, event: "BOOK_CALL" });

	// --- –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ù–µ—Ü–µ–ª–µ–≤–æ–π –ª–∏–¥ ---
	console.log("\n--- Êºî Scenario 2: Non-qualified Lead (Nurturing) ---");
	const chatId2 = "e2e-jtbd-chat-nurturing";
	await startConversationUseCase({ botPersonaId: createdPersonaId, chatId: chatId2 });
	await processUserInputUseCase({ chatId: chatId2, event: "START" });
	await processUserInputUseCase({ chatId: chatId2, event: "SUBMIT_NAME", payload: { text: "–ò–≤–∞–Ω" } });
	await processUserInputUseCase({ chatId: chatId2, event: "SUBMIT_JOBS", payload: { selection: ["support"] } });
	await processUserInputUseCase({ chatId: chatId2, event: "SUBMIT_CONTEXTS", payload: { selection: ["telegram"] } });
	await processUserInputUseCase({ chatId: chatId2, event: "SUBMIT_STRUGGLES", payload: { text: "–ö–ª–∏–µ–Ω—Ç—ã –¥–æ–ª–≥–æ –∂–¥—É—Ç –æ—Ç–≤–µ—Ç–∞" } });
	await processUserInputUseCase({ chatId: chatId2, event: "SUBMIT_OUTCOMES", payload: { text: "–£—Å–∫–æ—Ä–∏—Ç—å —Å–∞–ø–ø–æ—Ä—Ç" } });
	await processUserInputUseCase({ chatId: chatId2, event: "SUBMIT_EXTRAS", payload: { selection: [] } }); // –ë–µ–∑ CRM
	await processUserInputUseCase({ chatId: chatId2, event: "SELECT_TIMELINE", payload: { selection: "month" } });
	await processUserInputUseCase({ chatId: chatId2, event: "SELECT_BUDGET", payload: { selection: ">1500" } });
	await processUserInputUseCase({ chatId: chatId2, event: "TOO_EXPENSIVE" }); // –ù–∞–∂–∏–º–∞–µ—Ç "–ø–æ–∫–∞ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ"

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—Ç –¥–ª—è nurturing –±—ã–ª –≤—ã–∑–≤–∞–Ω
	if (startNurturingMock.mock.calls.length > 0) {
		console.log("\n‚úÖ startNurturingSequenceOutPort was called successfully!");
	} else {
		console.error("‚ùå E2E Test Failed: startNurturingSequenceOutPort was NOT called.");
	}

	console.log("\n--- ‚úÖ E2E Final Test Finished ---\n");
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
runJtbdQualifierTestFinal();
import { setPortAdapter } from "@maxdev1/sotajs";
import { composeApp } from "./src/composition";
import { defineBotPersonaUseCase } from "./src/desing/application/define-bot-persona.use-case";
import { botPersonaDefinedOutPort } from "./src/desing/application/ports";
import { processUserInputUseCase } from "./src/runtime/application/process-user-input.use-case";
import { startConversationUseCase } from "./src/runtime/application/start-conversation.use-case";

// --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ "Lead Qualifier Bot" ---

const leadQualifierBotDefinition = {
	name: "Lead Qualifier Bot",
	fsmDefinition: {
		initialStateId: "welcome",
		states: [
			{ id: "welcome" },
			{ id: "ask_name" },
			{ id: "ask_company_size" },
			{ id: "ask_role" },
			{ id: "ask_goal" },
			{ id: "offer_call" },
			{ id: "qualified_goodbye" },
			{ id: "declined_goodbye" },
		],
		transitions: [
			{ from: "welcome", event: "START", to: "ask_name" },
			{
				from: "ask_name",
				event: "SUBMIT_NAME",
				to: "ask_company_size",
				assign: { userName: "payload.name" },
			},
			{
				from: "ask_company_size",
				event: "SELECT_SIZE",
				to: "ask_role",
				assign: { companySize: "payload.size" },
			},
			{
				from: "ask_role",
				event: "SUBMIT_ROLE",
				to: "ask_goal",
				assign: { userRole: "payload.role" },
			},
			{
				from: "ask_goal",
				event: "SUBMIT_GOAL",
				to: "offer_call",
				assign: { userGoal: "payload.goal" },
			},
			{ from: "offer_call", event: "ACCEPT_CALL", to: "qualified_goodbye" },
			{ from: "offer_call", event: "DECLINE_CALL", to: "declined_goodbye" },
		],
	},
	viewDefinition: {
		nodes: [
			{
				id: "welcome",
				component: "Message",
				props: {
					text: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª—é, —Å–º–æ–∂–µ–º –ª–∏ –º—ã –±—ã—Ç—å –≤–∞–º –ø–æ–ª–µ–∑–Ω—ã. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
					buttons: [{ label: "–ù–∞—á–∞—Ç—å", event: "START" }],
				},
			},
			{
				id: "ask_name",
				component: "Message",
				props: { text: "–†–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É! –ö–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?" },
			},
			{
				id: "ask_company_size",
				component: "Message",
				props: {
					text: "–°–ø–∞—Å–∏–±–æ, context.userName! –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏?",
					buttons: [
						{ label: "1-10", event: "SELECT_SIZE", payload: { size: "1-10" } },
						{
							label: "11-50",
							event: "SELECT_SIZE",
							payload: { size: "11-50" },
						},
						{
							label: "51-200",
							event: "SELECT_SIZE",
							payload: { size: "51-200" },
						},
						{
							label: "200+",
							event: "SELECT_SIZE",
							payload: { size: "200+" },
						},
					],
				},
			},
			{
				id: "ask_role",
				component: "Message",
				props: { text: "–ü–æ–Ω—è–ª. –ê –∫–∞–∫–∞—è —É –≤–∞—Å —Ä–æ–ª—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏?" },
			},
			{
				id: "ask_goal",
				component: "Message",
				props: {
					text: "–û—Ç–ª–∏—á–Ω–æ. –û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ, –∫–∞–∫—É—é –∑–∞–¥–∞—á—É –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ—à–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞?",
				},
			},
			{
				id: "offer_call",
				component: "Message",
				props: {
					text: "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã! –í–∏–∂—É, —á—Ç–æ –º—ã –º–æ–∂–µ–º –±—ã—Ç—å –≤–∞–º –ø–æ–ª–µ–∑–Ω—ã. context.userName, –ø—Ä–µ–¥–ª–∞–≥–∞—é —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è. –£–¥–æ–±–Ω–æ?",
					buttons: [
						{ label: "–î–∞, —É–¥–æ–±–Ω–æ", event: "ACCEPT_CALL" },
						{ label: "–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ", event: "DECLINE_CALL" },
					],
				},
			},
			{
				id: "qualified_goodbye",
				component: "Message",
				props: {
					text: "–û—Ç–ª–∏—á–Ω–æ! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!",
				},
			},
			{
				id: "declined_goodbye",
				component: "Message",
				props: {
					text: "–ü–æ–Ω–∏–º–∞—é. –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ, —Å–ø–∞—Å–∏–±–æ –∑–∞ —É–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è! –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è, –≤—ã –∑–Ω–∞–µ—Ç–µ, –≥–¥–µ –Ω–∞—Å –Ω–∞–π—Ç–∏.",
				},
			},
		],
	},
	formDefinition: {
		id: "lead-qualifier-form",
		name: "Lead Qualifier Form",
		fields: [
			{ id: "f-name", name: "userName", type: "string", label: "User Name" },
			{
				id: "f-size",
				name: "companySize",
				type: "string",
				label: "Company Size",
			},
			{ id: "f-role", name: "userRole", type: "string", label: "User Role" },
			{ id: "f-goal", name: "userGoal", type: "string", label: "User Goal" },
		],
	},
};

// --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞ ---

async function runLeadQualifierTest() {
	console.log("\n--- üöÄ Starting E2E Lead Qualifier Bot Test ---");

	composeApp();

	let createdPersonaId: string;
	setPortAdapter(botPersonaDefinedOutPort, async (dto) => {
		createdPersonaId = dto.personaId;
		console.log(`\n‚úÖ Bot Persona Defined: ${dto.name} (ID: ${dto.personaId})`);
	});

	// 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º "–ª–∏—á–Ω–æ—Å—Ç—å" –±–æ—Ç–∞
	console.log("\n1Ô∏è‚É£  Defining Lead Qualifier Bot Persona...");
	await defineBotPersonaUseCase(leadQualifierBotDefinition);

	if (!createdPersonaId) {
		console.error("‚ùå E2E Test Failed: Bot Persona ID was not captured.");
		return;
	}

	const chatId = "e2e-lead-qualifier-chat-1";

	// 2. –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥
	console.log(`\n2Ô∏è‚É£  Starting conversation for chatId: ${chatId}...`);
	await startConversationUseCase({ botPersonaId: createdPersonaId, chatId });

	// 3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "–ù–∞—á–∞—Ç—å"
	console.log("\n3Ô∏è‚É£  Processing user event: START...");
	await processUserInputUseCase({ chatId, event: "START" });

	// 4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∏–º—è
	const userName = "–ï–≤–≥–µ–Ω–∏–π";
	console.log(`\n4Ô∏è‚É£  Processing user event: SUBMIT_NAME with payload: { name: "${userName}" }...`);
	await processUserInputUseCase({
		chatId,
		event: "SUBMIT_NAME",
		payload: { name: userName },
	});

	// 5. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏
	const companySize = "11-50";
	console.log(`\n5Ô∏è‚É£  Processing user event: SELECT_SIZE with payload: { size: "${companySize}" }...`);
	await processUserInputUseCase({
		chatId,
		event: "SELECT_SIZE",
		payload: { size: companySize },
	});

	// 6. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å–≤–æ—é —Ä–æ–ª—å
	const userRole = "–í–ª–∞–¥–µ–ª–µ—Ü";
	console.log(`\n6Ô∏è‚É£  Processing user event: SUBMIT_ROLE with payload: { role: "${userRole}" }...`);
	await processUserInputUseCase({
		chatId,
		event: "SUBMIT_ROLE",
		payload: { role: userRole },
	});

	// 7. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–∏—Å—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É
	const userGoal = "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤—É—é –ª–∏–Ω–∏—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏";
	console.log(`\n7Ô∏è‚É£  Processing user event: SUBMIT_GOAL with payload: { goal: "${userGoal}" }...`);
	await processUserInputUseCase({
		chatId,
		event: "SUBMIT_GOAL",
		payload: { goal: userGoal },
	});

	// 8. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è –Ω–∞ –∑–≤–æ–Ω–æ–∫
	console.log("\n8Ô∏è‚É£  Processing user event: ACCEPT_CALL...");
	await processUserInputUseCase({ chatId, event: "ACCEPT_CALL" });

	console.log("\n--- ‚úÖ E2E Lead Qualifier Bot Test Finished ---\n");
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
runLeadQualifierTest();
